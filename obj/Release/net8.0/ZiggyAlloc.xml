<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZiggyAlloc</name>
    </assembly>
    <members>
        <member name="T:ZiggyAlloc.Pointer`1">
            <summary>
            A type-safe wrapper around an unmanaged pointer.
            Note: No implicit conversion to Span&lt;T&gt; is provided, as it would require
            assuming a length of 1, which is unsafe for pointers to arrays.
            Use the explicit .AsSpan(count) method for clarity and safety.
            </summary>
            <typeparam name="T">The unmanaged type this pointer points to</typeparam>
        </member>
        <member name="F:ZiggyAlloc.Pointer`1.Ptr">
            <summary>The raw pointer value</summary>
        </member>
        <member name="M:ZiggyAlloc.Pointer`1.#ctor(System.IntPtr)">
            <summary>Creates a new Pointer wrapper around the given raw pointer</summary>
        </member>
        <member name="P:ZiggyAlloc.Pointer`1.Value">
            <summary>Gets a reference to the value at this pointer location</summary>
        </member>
        <member name="P:ZiggyAlloc.Pointer`1.Item(System.Int32)">
            <summary>Gets a reference to the value at the specified index from this pointer</summary>
        </member>
        <member name="M:ZiggyAlloc.Pointer`1.AsSpan(System.Int32)">
            <summary>Creates a Span view over the memory starting at this pointer</summary>
        </member>
        <member name="P:ZiggyAlloc.Pointer`1.Raw">
            <summary>Gets the raw pointer value</summary>
        </member>
        <member name="P:ZiggyAlloc.Pointer`1.IsNull">
            <summary>Returns true if this pointer is null</summary>
        </member>
        <member name="M:ZiggyAlloc.Pointer`1.op_Implicit(ZiggyAlloc.Pointer{`0})~System.IntPtr">
            <summary>Implicitly converts to IntPtr</summary>
        </member>
    </members>
</doc>
